module ALU(result,cFlag,sFlag,zFlag,op,A,B);
input [3:0] op,A,B;
output reg [3:0] result;
output reg cFlag = 1'b0;
output reg sFlag = 1'b0;
output reg zFlag = 1'b0;
reg [4:0] temp;
reg [3:0] X;
reg [2:0] M,N;
parameter [3:0] XOR = 4'b1110,NAND = 4'b1000,ADD = 4'b0100,XNOR =  4'b0010,SUB = 4'b1101,MUL =  4'b0101,OR = 4'b1010,AND = 4'b0011;

always @(op or A or B)
begin
	case(op)
	XOR:
	begin
	result = A ^ B;
	if (result == 4'b0000)
		zFlag <= 1'b1;
	else 
		zFlag <= 1'b0;
	cFlag = 1'b0;
	sFlag = 1'b0;
	end
	NAND:
	begin
	result = ~(A & B); 
	if (result == 4'b0000)
		zFlag <= 1'b1;
	else 
		zFlag <= 1'b0;
	cFlag = 1'b0;
	sFlag = 1'b0;
	end
	ADD:
	begin
	result = A + B;
	temp = A+B;
	if (result == 4'b0000)
		zFlag <= 1'b1;
	else 
		zFlag <= 1'b0;
	sFlag = 1'b0;
	cFlag = temp[4];
	end
	XNOR:
	begin
	result = ~(A ^ B);
	if (result == 4'b0000)
		zFlag <= 1'b1;
	else 
		zFlag <= 1'b0;
	cFlag = 1'b0;
	sFlag = 1'b0;
	end
	SUB:
	begin
	temp = A - B;
	X = (~B);
	X = X + 1;
	result = A+X;
	result = (~result);
	result = result+1;
	if (result == 4'b0000)
		zFlag <= 1'b1;
	else 
		zFlag <= 1'b0;
	cFlag = 1'b0;
	sFlag = temp[4];
	end
	MUL:
	begin
	M[0] = A[0] & B[0];
	M[1] = A[1] & B[0];
	M[2] = 0;
	N[0] = 0;
	N[1] = A[0] & B[1];
	N[2] = A[1] & B[1];
	result = M + N;
	if (result == 4'b0000)
		zFlag <= 1'b1;
	else 
		zFlag <= 1'b0;
	cFlag = 1'b0;
	sFlag = 1'b0;
	end
	OR:
	begin
	result = A | B;
	if (result == 4'b0000)
		zFlag <= 1'b1;
	else 
		zFlag <= 1'b0;
	cFlag = 1'b0;
	sFlag = 1'b0;
	end
	AND:
	begin
	result = A & B;
	if (result == 4'b0000)
		zFlag <= 1'b1;
	else 
		zFlag <= 1'b0;
	cFlag = 1'b0;
	sFlag = 1'b0;
	end
	endcase

end

endmodule
